
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const openAIApiKey = Deno.env.get("OPENAI_API_KEY");

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    const { pedidos, productos, periodo } = body;

    // Nueva validaci√≥n de datos m√≠nimos
    if (!Array.isArray(pedidos) || pedidos.length < 2 || !Array.isArray(productos) || productos.length === 0) {
      const message = `
Datos insuficientes para an√°lisis avanzado. Para obtener un informe preciso, aseg√∫rate de enviar al menos 2 pedidos y el cat√°logo de productos. 
Pedidos recibidos: ${pedidos?.length ?? 0}
Productos recibidos: ${productos?.length ?? 0}`;
      return new Response(JSON.stringify({
        insights: message
      }), {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      });
    }

    // Prompt optimizado
    const systemPrompt = `
Eres un consultor senior en inteligencia de negocios especializado en empresas B2B de pl√°sticos con operaciones de dropshipping en Per√∫. 
Tu rol es analizar datos comerciales (pedidos y productos) y generar insights ejecutivos de alto impacto. Prioriza claridad, rigor anal√≠tico, precisi√≥n y priorizaci√≥n empresarial. Responde en espa√±ol. Solo devuelve el an√°lisis, sin explicaciones meta ni saludos.`;

    const userPrompt = `
Analiza los siguientes datos de mi tienda online B2B de pl√°sticos y responde con un informe PERFECTO. 
- S√© exigente, detecta tendencias ocultas, oportunidades de ventas, riesgos y fallos. Revisa precios, vol√∫menes, m√°rgenes, comportamiento de clientes, productos y proveedores. 
- Usa cifras concretas (ventas, unidades, m√°rgenes) para justificar cada conclusi√≥n. 
- Si necesitas suposiciones, ind√≠calas brevemente.
- No ignores anomal√≠as ni detalles peque√±os.
- S√© exacto y sint√©tico, utiliza m√°ximo rigor ejecutivo.

Organiza tu informe con las siguientes secciones (usa vi√±etas si lo estimas efectivo):

1. üìà Principales oportunidades  
   - ¬øQu√© productos, categor√≠as o clientes est√°n creciendo?  
   - ¬øQu√© proveedor o segmento resalta positivamente?  
   - ¬øD√≥nde puedes escalar ventas o aumentar ticket promedio?

2. ‚ö†Ô∏è Problemas o ca√≠das detectadas  
   - Productos con desempe√±o inferior al esperado.  
   - Clientes o segmentos en declive.  
   - Errores comunes: cancelaciones, demoras, m√°rgenes negativos. Indica cifras.

3. ‚úÖ Sugerencias concretas  
   - Acciones r√°pidas de mejora comercial.  
   - Optimizaci√≥n: precios, promociones, log√≠stica, ventas cruzadas, reactivaci√≥n, productos a pausar o mejorar.

4. üîÆ Predicciones y pr√≥ximos pasos  
   - ¬øQu√© tendencia seguir√°/acentuar√° el pr√≥ximo mes?  
   - Riesgos log√≠sticos o de abastecimiento.
   - Acciones prioritarias para preparar y no perder ventas.

Datos enviados:  
- Per√≠odo analizado: ${periodo?.from ?? "-"} a ${periodo?.to ?? "-"}
- Pedidos filtrados (JSON): ${JSON.stringify(pedidos, null, 2)}
- Cat√°logo de productos completo (JSON): ${JSON.stringify(productos, null, 2)}

Condiciones:  
- Usa datos num√©ricos, fechas (YYYY-MM-DD) y cantidades.
- Solo responde con el informe, sin explicar tu proceso ni dar contexto meta.
- Prioriza hallazgos de mayor impacto o urgencia.
- Si los datos son m√≠nimos o ves inconsistencias, ind√≠calo en el informe ejecutivamente.
- Mant√©n formato claro, profesional y de m√°ximo valor para la direcci√≥n.

Output en espa√±ol. Estructura ordenadamente las secciones indicadas. Resume al m√°ximo, pero sin perder precisi√≥n ni profundidad.
`;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${openAIApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.1,
        max_tokens: 1200,
      }),
    });

    const data = await response.json();
    const aiInsights = data.choices?.[0]?.message?.content ?? "Sin respuesta de la IA.";

    return new Response(JSON.stringify({ insights: aiInsights }), {
      status: 200,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  } catch (err: any) {
    console.error("Error en analyze-business-data Edge Function:", err);
    return new Response(JSON.stringify({ error: err.message || String(err) }), {
      status: 500,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  }
});
